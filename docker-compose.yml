services:
  front-end:
    build: ./frontend/.
    container_name: front-end
    ports:
      - "5173:5173"
    networks:
      - sheepop_network

  back-end:
    build: ./backend/.
    container_name: back-end
    ports:
      - "8080:8080"
    volumes:
      - ./backend/.m2:/root/.m2
      - ./backend/logs:/app/logs
    stdin_open: true
    tty: true
    networks:
      - sheepop_network

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.28
    container_name: es
    environment:
      - node.name=es
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - ./databases/es_data:/usr/share/elasticsearch/data
    networks:
      - sheepop_network

  mongo:
    image: mongo
    command: mongod --replSet my-mongo-set --bind_ip_all
    ports:
      - "27018:27017"
    volumes:
      - ./databases/mongo_data:/data/db
    networks:
      - sheepop_network

  mongo_init:
    image: mongo
    depends_on:
      - mongo
    ports:
      - "27020:27017"
    restart: no
    entrypoint: >
      sh -c "
      sleep 15;
      mongosh --host mongo --eval '
          rs.initiate({
              _id: \"my-mongo-set\",
              members: [{ _id: 1, host: \"mongo:27017\" }]
          });
      ';

      mongosh --host mongo --eval 'use bdc' --eval '
          db.createUser({
              user: \"root\",
              pwd: \"root\",
              roles: [\"readWrite\"]
          })
      ';
      echo '✅ Khởi tạo thành công!';
      "
    networks:
      - sheepop_network

  es-init:
    image: curlimages/curl:latest
    depends_on:
      - es
    entrypoint: >
      sh -c "
      echo 'Waiting for Elasticsearch...';
      sleep 20;
      curl -X PUT 'http://es:9200/products' -H 'Content-Type: application/json' -d'
      {
        \"settings\": {
          \"analysis\": {
            \"analyzer\": {
              \"custom_folded_analyzer\": {
                \"tokenizer\": \"standard\",
                \"filter\": [\"lowercase\", \"asciifolding\"]
              }
            }
          }
        },
        \"mappings\": {
          \"properties\": {
            \"name\": {
              \"type\": \"text\",
              \"analyzer\": \"custom_folded_analyzer\"
            },
            \"shopId\": { \"type\": \"keyword\" },
            \"categoryId\": { \"type\": \"keyword\" },
            \"createdAt\": { \"type\": \"date\" }
          }
        }
      }';
      curl -X PUT 'http://es:9200/shop_orders' -H 'Content-Type: application/json' -d'
      {
        \"mappings\": {
          \"properties\": {
            \"shopId\": { \"type\": \"keyword\" },
            \"userId\": { \"type\": \"keyword\" },
            \"orderId\": { \"type\": \"keyword\" },
            \"createdAt\": { \"type\": \"date\" }
          }
        }
      }';
      echo 'Mapping created!';
      "
    networks:
      - sheepop_network

  monstache:
    image: rwynn/monstache:latest
    depends_on:
      - es
      - es-init
    working_dir: /app/monstache
    command: -f ./config.toml
    environment:
      - MONSTACHE_LOG_DIR=logs
    volumes:
      - ./databases/monstache:/app/monstache
    ports:
      - "8082:8080"
    networks:
      - sheepop_network
    # restart: unless-stopped

  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - ./databases/redis_data:/data
    networks:
      - sheepop_network

networks:
  sheepop_network:
    driver: bridge
    name: sheepop_network